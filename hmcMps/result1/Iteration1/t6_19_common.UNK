var sysUrl="";
/**
 *	通用功能js
 *	Author xiechengcheng
 *	Date   2010-12-10
 */

function disableKeys(eve){
   var ev = (document.all) ? window.event : eve;
   var evCode = (document.all) ? ev.keyCode : ev.which;
   var srcElement = (document.all) ? ev.srcElement : ev.target;
   // Enter键    
   if(srcElement.type != "textarea"){
     if (evCode == 13){
         return false;
      }
   }
}

function NewDate(str) {
	var strs = str.split(" ");
	str = strs[0].split('-');
	var date = new Date();
	date.setUTCFullYear(str[0], str[1] - 1, str[2]);
	date.setUTCHours(0, 0, 0, 0);
	return date;
}

function jsonObj2Str(json) {   
   var str = "{";   
   for (prop in json) {   
       str += prop + ":" + json[prop] + ",";   
   }   
   str = str.substr(0, str.length - 1);   
   str += "}";    
   return str;   
}

(document.all) ? (document.onkeydown = disableKeys) : (document.onkeypress = disableKeys);

/**
 *	获取字符串的真实长度(一个中文占两个长度，英文或者数字占一个长度)
 *
 *	@param	str		获取实际长度的目标字符串
 *
 *	@return		目标字符串的实际长度
 */
function getTrueLenth(str){
     return str.replace(/[^\x00-\xff]/g,"xx").length;
} 

function isNullStr(str){
	if(str==null||typeof(str)==undefined){
		return true;
	}
	if($.trim(str+"").length<=0){
		return true;
	}
	
	return false;
}

/**
*@param	num		控制的字符长度
*@param	str		输入的内容
@param	idname	显示剩余的控件ID
*/
function getRestLength(num,str,idname){
    var restlegth = (num - getTrueLenth(str))/2;
    if(restlegth>0){
    	$("#"+idname).html("<font color='red'>还有"+restlegth+"字</font>");
    }else{
    	$("#"+idname).html("<font color='red'>已经到达字数最大上限！</font>");
    }
}
  
/**
 *	清空指定表单中的内容,参数为目标form的id
 *
 *	@param 	formId	将要清空内容的表单的id
 */
function resetContent(formId) {
	var clearForm = document.getElementById(formId);
	if (null != clearForm) {
		clearForm.reset();
	}
}

/**
 *	刷新列表(适用于Jquery Easy Ui中的dataGrid)
 *
 *	@param	dataTableId	将要刷新数据的table列表id
 *  @param	type	如果为selectAll，则表示查询所有，此时要清除列表数据请求参数中的查询条件condition，
 *					（当执行查询操作时，列表的condition参数值将不为空）
 */
function flashTable(dataTableId, type){
	if ("selectAll" == type) {
		var queryParams = $('#'+dataTableId).datagrid('options').queryParams;
		//获取搜索字
		queryParams.condition="1 = 1";
		$('#'+dataTableId).datagrid('options').queryParams=queryParams;
	}
	$('#'+dataTableId).datagrid('reload');
}	
/**
 * 创建默认kindEditor
 */
function createDefEditor(name){
	KindEditor.basePath = '../../resources/js/kindeditor-4.1.6/';
	var editor=KindEditor.create('textarea[name="'+name+'"]', {// 打开Dialog后创建编辑器
		uploadJson : sysUrl+'/kindEditor.do?method=uploadJson',
		fileManagerJson : sysUrl+'/kindEditor.do?method=fileManagerJson',
		allowFileManager : true,
		allowFlashUpload:true,
		allowMediaUpload:true,
		newlineTag:'p',
		resizeType : 1,
		filterMode:false
	});
	return editor;
}

function convertToChinese(nub){  
	var STR_NUMBER = ["零", "一", "二", "三", "四", "五", "六", "七", "八", "九","十"]; 
    if(nub>0&&nub<=10){
		return STR_NUMBER[nub];
	}else if(nub>10&&nub<20){
		return STR_NUMBER[10]+STR_NUMBER[nub-10];
	}else if(nub>20&&nub<30){
		return "二十"+STR_NUMBER[nub-20];
	}else{
		return nub+"";
	}
}  

function createSimpleEditor(name){
	KindEditor.basePath = '../../resources/js/kindeditor-4.1.6/';
	var editor = KindEditor.create('textarea[name="'+name+'"]', {
		resizeType : 1,
		allowPreviewEmoticons : false,
		allowImageUpload : false,
		items : [
			'fontname', 'fontsize', '|', 'forecolor', 'hilitecolor', 'bold', 'italic', 'underline',
			'removeformat', '|', 'justifyleft', 'justifycenter', 'justifyright', 'insertorderedlist',
			'insertunorderedlist', '|', 'emoticons', 'image', 'link']
	});
	
	return editor;
}

function removeEditor(name){
	KindEditor.remove('textarea[name="'+name+'"]');
	return null;
}

/**
 *	取消选择(适用于Jquery Easy Ui中的dataGrid)
 *
 *	@param	dataTableId	将要取消所选数据记录的目标table列表id
 */
function clearSelect(dataTableId) {
	$('#'+dataTableId).datagrid('clearSelections');
	$("input[type='checkbox']").eq(0).attr("checked",false);
}

/**
 *	取消选择,主要用于系统中主明细结构的明细表中(为明细表定制的)(适用于Jquery Easy Ui中的dataGrid)
 *
 *	@param	mainTableId	将要取消所选数据记录的目标主表id
 *	@param	MxTableId	将要取消所选数据记录的目标明细表id
 */
function clearMxSelect(mainTableId, MxTableId) {
	$('#'+MxTableId).datagrid('clearSelections');
	var rows = $("#"+mainTableId).datagrid('getRows');
	if (null != rows) {
		$("input[type='checkbox']").eq(rows.length+1).attr("checked",false);
	}
}

/**
 *	关闭窗口(适用于Jquery Easy Ui中的dataGrid)
 *
 *	@param	dialogId	将要关闭窗口的id
 */
function closeDialog(dialogId) {
	$('#'+dialogId).dialog('close');
}

/**
 *	自适应表格的宽度处理(适用于Jquery Easy Ui中的dataGrid),
 *	可以实现列表的各列宽度跟着浏览宽度的变化而变化。
 *
 *	@param	percent	当前列的列宽所占整个窗口宽度的百分比(以小数形式出现，如0.3代表30%)
 *
 *	@return	通过当前窗口和对应的百分比计算出来的具体宽度
 */
function fillsize(percent){
	var bodyWidth = document.body.clientWidth;
	return (bodyWidth-90)*percent;
 }
 
/**
 * 获取所选记录的id
 *
 * @param	dataTableId	目标记录所在的列表table的id
 * @param	errorMessage 错误的提示信息
 *
 * @return 所选记录js对象
 */
function getSingleSelectRow(dataTableId, errorMessage) {
	var rows = $('#'+dataTableId).datagrid('getSelections');
	var num = rows.length;
	var ids = null;
	if(num == 1){
		return rows[0];
	}else{
		$.messager.alert('提示消息',errorMessage,'info');
		return null;
	}
}

/**
 * 获取所选记录的id,多个id用逗号分隔
 *
 * @param	dataTableId	目标记录所在的列表table的id
 *
 * @return 所选记录的id字符串(多个id用逗号隔开)
 */
function getSelectIds(dataTableId, noOneSelectMessage) {
	var rows = $('#'+dataTableId).datagrid('getSelections');
	var num = rows.length;
	var ids = null;
	if(num  < 1){
		if (null != noOneSelectMessage)$.messager.alert('提示消息',noOneSelectMessage,'info');
		return null;
	}else{
		for(var i = 0; i < num; i++){
			if(null == ids || i == 0){
				ids = rows[i].id;
			} else {
				ids = ids + "," + rows[i].id;
			}
		}
		return ids;
	}
}
 
/**
 *	删除所选记录(适用于Jquery Easy Ui中的dataGrid)(删除的依据字段是id)
 *
 *	@param	dataTableId	将要删除记录所在的列表table的id
 *	@param	requestURL	与后台服务器进行交互，进行具体删除操作的请求路径
 *	@param	confirmMessage 删除确认信息
 * 	@param	mxDataTableId：明细表datagrid的id(实用于主明细表结构，删除主表记录操作)
 *	@param	mainId			在主从表结构的从表全删除操作中，该id指向主表中的记录id
 */
function deleteNoteById(dataTableId, requestURL, confirmMessage, mxDataTableId, mainId){
	if (null == confirmMessage || typeof(confirmMessage) == "undefined" || "" == confirmMessage) {
		confirmMessage = "确定删除所选记录?";
	}
	var rows = $('#'+dataTableId).datagrid('getSelections');
	var num = rows.length;
	var ids = null;
	if(num  < 1){
		$.messager.alert('提示消息','请选择你要删除的记录!','info');
	}else{
		$.messager.confirm('确认', confirmMessage, function(r){
			if (r) {
				for(var i = 0; i < num; i++){
					if(null == ids || i == 0){
						ids = rows[i].id;
					} else {
						ids = ids + "," + rows[i].id;
					}
				}
				var condition = "a.id in ("+ids+")";
				openProcessingDialog();
				$.getJSON(requestURL,{"condition":condition,"mainId":mainId},function(data){
					closeProcessingDialog();
					if (null != data && null != data.message && "" != data.message) {
						$.messager.alert('提示消息',data.message,'info');	
						flashTable(dataTableId);
					} else {
						$.messager.alert('提示消息','删除失败！','warning');
					}
					clearSelect(dataTableId);
					if (null != mxDataTableId || typeof(mxDataTableId) != "undefined" || "" != mxDataTableId) {
						flashTable(mxDataTableId);
					}
				});
			}
		});
	}
}

/**
 *	删除所选记录(适用于Jquery Easy Ui中的dataGrid)，删除的依据字段是mxid
 *
 *	@param	dataTableId	将要删除记录所在的列表table的id
 *	@param	requestURL	与后台服务器进行交互，进行具体删除操作的请求路径
 *	@param	mainId			在主从表结构的从表全删除操作中，该id指向主表中的记录id
 */
function deleteNoteByMxIds(dataTableId, requestURL, mainId){
	var rows = $('#'+dataTableId).datagrid('getSelections');
	var num = rows.length;
	var mxids = null;
	if(num  < 1){
		$.messager.alert('提示消息','请选择你要删除的记录!','info');
	}else{
		$.messager.confirm('确认', '确定删除所选记录?', function(r){
			if (r) {
				for(var i = 0; i < num; i++){
					if(null == mxids || i == 0){
						mxids = rows[i].mxid;
					} else {
						mxids = mxids + "," + rows[i].mxid;
					}
				}
				var condition = "mxid in ("+mxids+")";
				openProcessingDialog();
				$.getJSON(requestURL,{"condition":condition,"mainId":mainId},function(data){
					closeProcessingDialog();
					if (null != data && null != data.message && "" != data.message) {
						$.messager.alert('提示消息',data.message,'info');	
					} else {
						$.messager.alert('提示消息','删除失败！','warning');
					}
					flashTable(dataTableId);
					clearSelect(dataTableId);
				});
			}
		});
	}
}

/**
 *	删除所有记录
 *
 *	@param	dataTableId	将要删除记录所在的列表table的id
 *	@param	requestURL	请求服务器进行删除操作的请求路径
 *	@param	mainId			在主从表结构的从表全删除操作中，该id指向主表中的记录id
 * 	@param	mxDataTableId：明细表datagrid的id(实用于主明细表结构，删除明细表记录操作)
 *	@param	confirmMessage 删除确认信息
 */
function deleteAll(dataTableId, requestURL, mainId, mxDataTableId, confirmMessage) {
	var tip = $('#'+dataTableId).datagrid('options').queryParams.tip;
	var pager = $('#'+dataTableId).datagrid('getPager');
	var total = $(pager).pagination('options').total;
	var pageSize = $(pager).pagination('options').pageSize;
	var totlePage = parseInt(total/pageSize) + (total%pageSize > 0 ? 1:0); 
	if (null == confirmMessage || typeof(confirmMessage) == "undefined" || "" == confirmMessage) {
		if (null == tip || "" == tip) {
			confirmMessage = '本全删将删除<font color="red">所有记录</font>，'
						+'共计<font color="red">'+totlePage+'</font>页<font color="red">'+total+'</font>条记录，删除后数据将不能恢复，'
						+ '确定删除?';
		} else {
			confirmMessage = '本全删操作将删除<font color="red">当前查询出的所有记录</font>，'
						+'查询条件为<font color="red">['+tip+']</font>，'
						+'共计<font color="red">'+totlePage+'</font>页<font color="red">'+total+'</font>条记录，删除后数据将不能恢复，'
						+ '确定删除?';
		}
		
	}
	if (total <= 0) {
			$.messager.alert('提示消息','没有数据可以删除！','info');
	} else {
		$.messager.confirm('确认', confirmMessage, function(r){
			if (r) {
				var condition = $('#'+dataTableId).datagrid('options').queryParams.condition;
				openProcessingDialog();
				$.post(requestURL,{"condition":condition,"mainId":mainId},function(data){
					closeProcessingDialog();
					if (null != data && "" != data) {
						data = eval('('+data+')');
						if (null != data.message && "" != data.message) {
							$.messager.alert('提示消息',data.message,'info');	
							flashTable(dataTableId);
						} else {
							$.messager.alert('提示消息','删除失败！','warning');
						}
					}
					clearSelect(dataTableId);
					//如果有明细表则在执行删除操作完成后执行明细表刷新操作
					if (null != mxDataTableId || typeof(mxDataTableId) != "undefined" || "" != mxDataTableId) {
							flashTable(mxDataTableId);
					}
				});
			}
		});
	}
}


 

/**
 * 自动调整弹出窗口的长和宽,以适应不同分辨率浏览器下的显示
 *
 * @param	dialogId	弹出窗口的id
 * @param	widthRate	弹出窗口的宽度与浏览器所能提供的宽度(通常为弹出窗口所子页面对应的Iframe的宽度)的比例,在不同分辨率下使用该比率自动调整
 * @param	maxHeight	弹出窗口的最大高度
 * @param	maxWidth	弹出窗口的最大宽度
 */
function fillDialogWidthAndHeight(dialogId, widthRate, maxHeight, maxWidth) {
	var currentBodyHeight = $(window).height();
	var currentBodyWidth = $(window).width();
	//当前iframe窗口的高宽比
	var heightToWidthRate =  currentBodyHeight/currentBodyWidth;
	var fillWidth = currentBodyWidth*widthRate;
	var fillHeight = fillWidth * heightToWidthRate;
	//如果当前iframe窗口按百分比计算出的宽度大于实际设置的最大值，则以最大值为准
	if (fillWidth >= maxWidth) {
		fillWidth = maxWidth;
	//如果计算出的宽度小于最大值则进一步调整
	} else {
		//如果当前窗口的宽度的98%大于设置的最大值，则自动调整到最大值，否则就取当前窗口的98%作为宽度
		if ((currentBodyWidth * (95/100)) > maxWidth) {
			fillWidth = maxWidth;
		} else {
			fillWidth = currentBodyWidth * (95/100);
		}
	}
	//如果当前iframe窗口按百分比计算出的高度值大于实际设置的最大值，则以最大值为准，否则进一步调整的方法与以上的宽度调整相同
	if (fillHeight >= maxHeight) {
		fillHeight = maxHeight;
	}
	//计算窗口左上角的坐标，使窗口居中
	var leftPos = (currentBodyWidth - fillWidth)/2;
	var topPos = (currentBodyHeight - fillHeight)/2;
	//alert("currentBodyHeight = " + currentBodyHeight + ", currentBodyWidth = " + currentBodyWidth + ", fillHeight = " + fillHeight + ", fillWidth = " + fillWidth);
	$('#'+dialogId).dialog("resize",{width:fillWidth,height:fillHeight,left:leftPos,top:topPos});
}

/**
 * 自动调整弹出窗口的长和宽,以适应不同分辨率浏览器下的显示
 *
 * @param	dialogId	弹出窗口的id
 * @param	suitWidth	当前弹出窗口的最合适宽度
 * @param	widthRate	弹出窗口的宽度与浏览器所能提供的宽度(通常为弹出窗口所子页面对应的Iframe的宽度)的比例,在不同分辨率下使用该比率自动调整
 */
function fillDialogToSutiWidth(dialogId, suitWidth, widthRate) {
	var currentBodyHeight = $(window).height();
	var currentBodyWidth = $(window).width();
	//当前父容器窗口(iframe窗口)的高宽比
	var heightToWidthRate =  currentBodyHeight/currentBodyWidth;
	var fillWidth = 0;
	//如果提供了当前窗口和当前父容器(通常为当前页面所在的iframe)的宽比，则使用该比值进行计算，否则使用当前父容器窗口宽度的95%
	if (null != widthRate && "" != widthRate && typeof(widthRate) != "undefined") {
		fillWidth = currentBodyWidth*widthRate;
	} else {
		fillWidth = currentBodyWidth * (95/100);
	}
	if (fillWidth > suitWidth) {
		fillWidth = suitWidth;
	} 
	//高度按当前父容器的高宽比在刚计算出的当前弹出窗口宽度的基础之上进行计算
	var fillHeight = fillWidth * heightToWidthRate;
	//计算窗口左上角的坐标，使窗口居中
	var leftPos = (currentBodyWidth - fillWidth)/2;
	var topPos = (currentBodyHeight - fillHeight)/2;
	$('#'+dialogId).dialog("resize",{width:fillWidth,height:fillHeight,left:leftPos,top:topPos});
}




//格式化保险
function fmtInsurce(askpInsurance){
	var insuHtml="";
	var str="";
	if(!isNullStr(askpInsurance)){
		var insurs=askpInsurance.split(",");
		if(insurs!=null&&insurs.length>0){
			for(var i=0;i<insurs.length;i++){
				if(insurs[i].indexOf("force")>=0){
					insuHtml+="交强险";
					str=insurs[i].match(/\((.*?)\)/)[1];
					if(parseInt(str)<=6){
						insuHtml+="（6座以下）；";
					}else{
						insuHtml+="（6座以上）；";
					}
					
				}else if("damage"==insurs[i]){
					insuHtml+="车辆损失险；";
				}else if(insurs[i].indexOf("thirdparty")>=0){
					insuHtml+="第三者责任险";
					str=insurs[i].match(/\((.*?)\)/)[1];
					insuHtml+="（"+(parseInt(str)/10000)+"万元）；";
				}else if("nonavoid"==insurs[i]){
					insuHtml+="不计免赔险；";
				}else if("theft"==insurs[i]){
					insuHtml+="盗抢险；";
				}else if(insurs[i].indexOf("carbody")>=0){
					insuHtml+="恶意划痕险；";
					str=insurs[i].match(/\((.*?)\)/)[1];
					if(parseInt(str)>5000){
						insuHtml+="（"+parseInt(str)+"元）；";
					}else{
						insuHtml+="（"+(parseInt(str)/10000)+"万元）；";
					}
				}else if("glass"==insurs[i]){
					insuHtml+="玻璃单独破碎险；";
				}else if(insurs[i].indexOf("driver")>=0){
					insuHtml+="车上人员险";
					str=insurs[i].match(/\((.*?)\)/)[1];
					var strs=str.split("#");
					if(strs!=null&&strs.length>0){
						insuHtml+="（驾驶席"+(parseInt(strs[0])/10000)+"万+乘员席"+(parseInt(strs[1])/10000)+"万×"+strs[2]+"人）；";
					}
				}
			}
		}
	}
	return insuHtml;
}

function dealAskCount(){
	var asknum_span=window.parent.document.getElementById("asknum_span");
	
	var askHtml=asknum_span.innerHTML;
	if(!isNullStr(askHtml)){
		var count=askHtml.replace("（","").replace("）","");
		count=parseInt(count);
		if(count==1){
			asknum_span.innerHTML="";
		}else if(count>1){
			asknum_span.innerHTML="（"+(count-1)+"）";
		}
	}
	
	
}

function proxyDeal(){
	var asknum_span=window.parent.document.getElementById("asknum_span");
	var askHtml=asknum_span.innerHTML;
	if(!isNullStr(askHtml)){
		var count=askHtml.replace("（","").replace("）","");
		count=parseInt(count);
		if(count==1){
			asknum_span.innerHTML="";
		}else if(count>1){
			asknum_span.innerHTML="（"+(count-1)+"）";
		}
	}
	
//	var wait_span=window.parent.document.getElementById("waitnum_span");
//	var waitHtml=wait_span.innerHTML;
//	if(!isNullStr(waitHtml)){
//		var count=waitHtml.replace("（","").replace("）","");
//		count=parseInt(count);
//		wait_span.innerHTML="（"+(count+1)+"）";
//	}else{
//		wait_span.innerHTML="（1）";
//	}
}

function dealAudiCount(){
	var asknum_span=window.parent.document.getElementById("respondnum_span");
	var askHtml=asknum_span.innerHTML;
	if(!isNullStr(askHtml)){
		var count=askHtml.replace("（","").replace("）","");
		count=parseInt(count);
		if(count==1){
			asknum_span.innerHTML="";
		}else if(count>1){
			asknum_span.innerHTML="（"+(count-1)+"）";
		}
	}
	
//	var wait_span=window.parent.document.getElementById("waitnum_span");
//	var waitHtml=wait_span.innerHTML;
//	if(!isNullStr(waitHtml)){
//		var count=waitHtml.replace("（","").replace("）","");
//		count=parseInt(count);
//		wait_span.innerHTML="（"+(count+1)+"）";
//	}else{
//		wait_span.innerHTML="（1）";
//	}
	
	
}

//已下订单
function dealOrderedCount(){
	var ordernum_span=window.parent.document.getElementById("ordernum_span");
	var waitHtml=ordernum_span.innerHTML;
	if(!isNullStr(waitHtml)){
		var count=waitHtml.replace("（","").replace("）","");
		count=parseInt(count);
		if(count>0){
			ordernum_span.innerHTML="（"+(count-1)+"）";
		}else{
			ordernum_span.innerHTML="";
		}
	}else{
		ordernum_span.innerHTML="";
	}
	
	
}

/**
 * 获取url参数
 * @param name
 * @return
 */
function getQueryString(name) {
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
    var r = window.location.search.substr(1).match(reg);
    if (r != null) return unescape(r[2]); return null;
    }


function delHtmlTag(str)
{
        return str.replace(/<[^>]+>/g,"");//去掉所有的html标记
}

$.fn.serializeObject = function()  
{  
   var o = {};  
   var a = this.serializeArray();  
   $.each(a, function() {  
       if (o[this.name]) {  
           if (!o[this.name].push) {  
               o[this.name] = [o[this.name]];  
           }  
           o[this.name].push(this.value || '');  
       } else {  
           o[this.name] = this.value || '';  
       }  
   });  
   return o;  
}; 

//全局监控所有的Ajax请求，对于没有权限或登录失效的ajax访问，踢回到登录页面
$(function(){
	$.ajaxSetup({
	    cache : false,
	    global : true,
	    complete: function(req, status) {
	    try{
	        var reqObj = eval('('+req.responseText+")");
	        //如果数据请求验证时，对应的请求资源(路径)没有权限(或者没有登录)
	        if (reqObj && reqObj.noRight) {
	        	alert("你无权进行该项操作，可能是登录失效，请重新登录！");
	            window.location.href = reqObj.loginUrl;
	        }
	      }catch(e){}
	    }
	});
});

function addError(tr,html){
	tr.addClass("error");
	tr.find(".msg").html(html);
}

function removeError(tr){
	tr.removeClass("error");
	tr.find(".msg").html("");
}